;buildInfoPackage: chisel3, version: 3.1.3, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-09-12 19:37:29.007, builtAtMillis: 1536781049007
circuit GCD : 
  module GCD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip OPA : UInt<32>, flip OPB : UInt<32>, flip START : UInt<1>, RESULT : UInt<32>, DONE : UInt<1>}
    
    reg OPAReg : UInt<32>, clock @[GCD.scala 18:20]
    reg OPBReg : UInt<32>, clock @[GCD.scala 19:20]
    reg cnt : UInt<5>, clock @[GCD.scala 20:20]
    node _T_19 = neq(OPAReg, UInt<1>("h00")) @[GCD.scala 22:29]
    node AisZero = eq(_T_19, UInt<1>("h00")) @[GCD.scala 22:17]
    node _T_22 = neq(OPBReg, UInt<1>("h00")) @[GCD.scala 23:29]
    node BisZero = eq(_T_22, UInt<1>("h00")) @[GCD.scala 23:17]
    node _T_24 = bits(OPAReg, 0, 0) @[GCD.scala 25:24]
    node AisEven = eq(_T_24, UInt<1>("h00")) @[GCD.scala 25:17]
    node _T_26 = bits(OPBReg, 0, 0) @[GCD.scala 26:24]
    node BisEven = eq(_T_26, UInt<1>("h00")) @[GCD.scala 26:17]
    node larger = gt(OPAReg, OPBReg) @[GCD.scala 27:23]
    node subop1 = mux(larger, OPAReg, OPBReg) @[GCD.scala 29:19]
    node subop2 = mux(larger, OPBReg, OPAReg) @[GCD.scala 30:19]
    node _T_28 = sub(subop1, subop2) @[GCD.scala 32:23]
    node _T_29 = asUInt(_T_28) @[GCD.scala 32:23]
    node subRes = tail(_T_29, 1) @[GCD.scala 32:23]
    node _T_31 = neq(subRes, UInt<1>("h00")) @[GCD.scala 33:34]
    node subResisZero = eq(_T_31, UInt<1>("h00")) @[GCD.scala 33:22]
    node _T_34 = eq(io.DONE, UInt<1>("h00")) @[GCD.scala 35:8]
    when _T_34 : @[GCD.scala 35:18]
      node _T_35 = and(AisEven, BisEven) @[GCD.scala 36:27]
      node _T_36 = add(cnt, _T_35) @[GCD.scala 36:16]
      node _T_37 = tail(_T_36, 1) @[GCD.scala 36:16]
      cnt <= _T_37 @[GCD.scala 36:9]
      skip @[GCD.scala 35:18]
    node _T_39 = eq(io.DONE, UInt<1>("h00")) @[GCD.scala 39:8]
    when _T_39 : @[GCD.scala 39:18]
      node _T_40 = or(AisEven, BisEven) @[GCD.scala 40:18]
      when _T_40 : @[GCD.scala 40:30]
        node _T_41 = dshr(OPAReg, AisEven) @[GCD.scala 41:24]
        OPAReg <= _T_41 @[GCD.scala 41:14]
        node _T_42 = dshr(OPBReg, BisEven) @[GCD.scala 42:24]
        OPBReg <= _T_42 @[GCD.scala 42:14]
        skip @[GCD.scala 40:30]
      else : @[GCD.scala 43:17]
        node _T_44 = dshr(subRes, UInt<1>("h01")) @[GCD.scala 44:24]
        OPAReg <= _T_44 @[GCD.scala 44:14]
        OPBReg <= subop2 @[GCD.scala 45:14]
        skip @[GCD.scala 43:17]
      skip @[GCD.scala 39:18]
    when io.START : @[GCD.scala 49:18]
      OPAReg <= io.OPA @[GCD.scala 50:12]
      OPBReg <= io.OPB @[GCD.scala 51:12]
      cnt <= UInt<1>("h00") @[GCD.scala 52:12]
      skip @[GCD.scala 49:18]
    node _T_46 = or(BisZero, subResisZero) @[GCD.scala 54:46]
    node _T_48 = mux(_T_46, OPAReg, UInt<1>("h00")) @[GCD.scala 54:37]
    node tmp = mux(AisZero, OPBReg, _T_48) @[GCD.scala 54:16]
    node _T_49 = dshl(tmp, cnt) @[GCD.scala 55:20]
    io.RESULT <= _T_49 @[GCD.scala 55:13]
    node _T_50 = or(AisZero, BisZero) @[GCD.scala 57:22]
    node _T_51 = or(_T_50, subResisZero) @[GCD.scala 57:33]
    io.DONE <= _T_51 @[GCD.scala 57:11]
    
